/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@5.8.0', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_LINUX_X64 = 'Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host'
        AGENT_MACOS_X64 = 'Jenkins-Agent-MacOS12-X64-Mac1Metal-Multi-Host'
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
    }
    stages {
        stage('Detect Docker-images') {
            agent {
                docker {
                    label AGENT_LINUX_X64
                    image 'docker/library/alpine:3'
                    registryUrl 'https://public.ecr.aws/'
                    alwaysPull true
                }
            }
            steps {
                script {
                    dockerAgent = detectDockerAgent()
                    env.javaVersionNumber = dockerAgent.javaVersion.replaceAll("[^0-9]", "") // Only get number
                    currentBuild.description = INPUT_MANIFEST
                }
            }
        }
        stage('Build OpenSearch-min Snapshots') {
            parallel {
                stage('macos-x64-tar') {
                    agent {
                        node {
                            label AGENT_MACOS_X64
                        }
                    }
                    steps {
                        script {
                            echo("Switching to Java ${env.javaVersionNumber} on MacOS")
                            sh("eval $(jenv init -)")
                            sh("jenv enable-plugin export")
                            sh("jenv versions && jenv doctor")
                            //sh("java -version")
                            //sh("jenv global ${dockerAgent.javaVersion}")
                            //sh("java -version")
                            //sh("env")
                            //sh("jenv versions")
                            //sh("java -version")
                            //sh("jenv doctor")
                            //sh("echo $JAVA_HOME")
                            //sh("echo $JENV_VERSION")
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
            }
        }
    }
}
